from Queue import deque


class ConvexHullTrick(object):
    
    @classmethod
    def merge(cls, hull1, hull2):
        return ConvexHullTrick(hull1.lines + hull2.lines)
        
    
    def __init__(self, lines, min_x=0.0, max_x=1000000000.0):
        self.min_x = min_x
        self.max_x = max_x
        self.pivots = None
        self.lines = None
        self._add_lines(lines)
        
    
    def _add_lines(self, lines):
        if not lines:
            return
        stack = deque()
        for a,b in lines:
            x = self.min_x
            while stack:
                a1, b1, x_prev = stack.pop()
                x = float(a-a1)/(b1-b)
                if x > x_prev:
                    stack.append((a1,b1,x_prev))
                    break
            if x < self.max_x:
                stack.append((a,b,x))
        
        self.pivots = [s[2] for s in stack]
        self.lines = [s[0:2] for s in stack]
    
    
    def shortest_dist(self, x):
        if self.pivots is None:
            return Ellipsis
       
        lo = 0
        hi = len(self.pivots)
        while lo < hi:
            mid = (lo+hi)//2
            if self.pivots[mid] < x: lo = mid+1
            else: hi = mid
        
        if lo > 0:
            lo -= 1
        res = self.lines[lo][1] * x + self.lines[lo][0]
        return res
        
    

class SegmentTree(object):
    
    def __init__(self, lines):
        self.n_lines = len(lines)
        self.tree = [None]*(2*self.n_lines)  #[ConvexHullTrick() for i in xrange(2*n_lines)]
        for i in xrange(0, self.n_lines):
            self.tree[self.n_lines + i] = ConvexHullTrick([lines[i][1:]])
        for i in reversed(xrange(1, self.n_lines)):
            self.tree[i] = ConvexHullTrick.merge(self.tree[i<<1], self.tree[i<<1|1])


    def query(self, x, l, r):  
        """ query for the interval [l, r) """
        min_dist = Ellipsis
        l += self.n_lines
        r += self.n_lines
        while l < r:
            if l&1:
                d = self.tree[l].shortest_dist(x)
                if d < min_dist: min_dist = d
                l += 1
            if r&1:
                r -= 1
                d = self.tree[r].shortest_dist(x)
                if d < min_dist: min_dist = d
            l >>= 1
            r >>= 1
        return min_dist
        
    
    def shortest_dist(self, x, exclusions):
        l_prev = 0
        min_dist = Ellipsis
        for l in exclusions:
            if l > l_prev:
                d = self.query(x, l_prev, l)
                if d < min_dist:
                    min_dist = d
            l_prev = l+1
            
        if l_prev < self.n_lines:
            d = self.query(x, l_prev, self.n_lines)
            if d < min_dist:
                min_dist = d
        return min_dist + x*x



def solve(n, m, pizzerias, customers):
    
    lines = [(i+1, p + s*s, -2*s) for i, (s,p) in enumerate(pizzerias)]
    lines.sort(key = lambda x: -x[2])
    idx_map = {l[0]: i for i,l in enumerate(lines)}
    exclusions = set([idx_map[d] for c in customers for d in c[2:]])
    exclusions = sorted(list(exclusions))
    # all indexes for pizzerias going forward will corresponds to indexes in sored list
    segment_tree = SegmentTree(lines)
    
    solution = [None]*m
    for i, c in enumerate(customers):
        x = c[0]
        exclusions = sorted(list(set([idx_map[d] for d in c[2:]])))
        solution[i] = segment_tree.shortest_dist(x, exclusions)
    return solution
        

if __name__ == "__main__":
    n, m = map(int, raw_input().rstrip().split())
    pizzerias = [map(int, raw_input().rstrip().split()) for _ in xrange(n)]
    customers = [map(int, raw_input().rstrip().split()) for _ in xrange(m)]
    solution = solve(n, m, pizzerias, customers)
    print "\n".join([str(s) for s in solution])
    

  


        